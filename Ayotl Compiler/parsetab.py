
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNleftPLUSMINUSleftMULTIPDIVIDEleftL_PARENTHESISR_PARENTHESISPROGRAM INT FLOAT IF ELSE READ PRINT VOID RETURN FOR WHILE SEMICOLON L_BRACE R_BRACE COMMA ASSIGN L_PARENTHESIS R_PARENTHESIS L_BRACKET R_BRACKET PLUS MINUS MULTIP DIVIDE GREATER_THAN LESS_THAN DIFF_THAN EQUALS_TO AND OR CONST_ID CONST_INT CONST_FLOAT\n\tprogr : neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro\n\t\n\tneurProStart : \n\t\n\tpro1 : vars pro1\n\t\t| funcion pro1\n\t\t| empty\n\t\n\tpro2 : vars pro2\n\t\t| estatuto pro2\n\t\t| empty \n\t\n\tneurPro1 :\n\t\n\tneurPro :\n\t\n\tvars : tipo vars1 vars2 SEMICOLON\n\t\n\tvars1 : CONST_ID\n\t\t| CONST_ID L_BRACKET cte R_BRACKET\n\t\t| CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET\n\n\t\n\tvars2 : COMMA vars1 vars2\n\t\t| empty\n\t\n\ttipo : INT\n\t\t| FLOAT\n\t\n\tbloque : L_BRACE bloque1 R_BRACE\n\t\n\tbloque1 : estatuto bloque1\n\t\t| empty\n\t\n\testatuto : condicion\n\t\t| lectura\n\t\t| ciclo\n\t\t| asignacion\n\t\t| funcionLL SEMICOLON\n\t\t| impresion\n\t\n\tasignacion : datStr ASSIGN exp SEMICOLON \n\t\n\tdatStr : CONST_ID\n\t\t| CONST_ID L_BRACKET exp R_BRACKET\n\t\t| CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET \n\t\n\tlectura : READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON\n\t\n\timpresion : PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON\n\t\n\texpresion : expOp\n\t\t| expOp AND expOp\n\t\t| expOp OR expOp\n\t\n\texpOp : exp\n\t\t| exp GREATER_THAN exp\n\t\t| exp LESS_THAN exp\n\t\t| exp EQUALS_TO exp \n\t\t| exp DIFF_THAN exp\n\t\n\texp : termino\n\t\t| termino PLUS exp\n\t\t| termino MINUS exp \n\t\n\ttermino : factor\n\t\t| factor MULTIP termino\n\t\t| factor DIVIDE termino\n\t\n\tfactor : L_PARENTHESIS expresion R_PARENTHESIS\n\t\t| factor1\n\t\t| PLUS factor1\n\t\t| MINUS factor1\n\t\n\tfactor1 : datStr\n\t\t| funcionLL\n\t\t| cte\n\t\n\tcte : CONST_INT\n\t\t| CONST_FLOAT empty\n\t\n\tcondicion : IF L_PARENTHESIS expresion neurCond1 bloque neurCond2\n\t\t|  IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3  bloque neurCond4\n\t\n\tneurCond1 : R_PARENTHESIS\n\t\n\tneurCond2 : \n\t\n\tneurCond2x1 : \n\t\n\tneurCond3 :\n\t\n\tneurCond4 :\n\t\n\tciclo : FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3\n\t\t| WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 \n\t\n\tneurCiclo1 : \n\t\n\tneurCiclo2 : \n\t\n\tneurCiclo3 : \n\t\n\tfuncion : neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE\n\t\t| neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE\n\t\n\tfuncionVars : vars\n\t\t| empty \n\t\n\tneurFunc : tipo CONST_ID\n\t\n\tneurFuncVoid : VOID CONST_ID\n\t\n\tneurFunc2 : tipo vars1\n\t\n\tfuncion1 : COMMA neurFunc2 funcion1\n\t\t| empty\n\t\n\tfuncionLL : neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS\n\t\n\tneurFuncLL : CONST_ID\n\t\n\tneurFuncLL2 : exp\n\t\n\tfuncionLL1 : COMMA exp funcionLL1\n\t\t| empty\n\t\n\tempty :\n\t'
    
_lr_action_items = {'PROGRAM':([0,2,],[-2,3,]),'$end':([1,63,90,],[0,-10,-1,]),'CONST_ID':([3,10,13,14,15,16,24,26,30,34,35,37,38,39,40,41,43,51,62,66,67,68,69,70,72,73,82,83,85,97,98,103,105,107,108,111,112,116,117,118,119,120,121,123,124,127,131,132,133,134,135,141,142,149,154,157,161,167,172,173,174,178,180,183,184,185,],[4,20,-17,-18,23,-9,32,53,53,32,32,53,-22,-23,-24,-25,-27,-11,32,-26,32,95,32,95,32,95,32,32,32,-66,32,-83,-83,32,32,32,32,32,32,32,32,32,32,-28,32,32,32,-71,-72,32,32,-60,32,-32,-33,32,-57,32,-19,95,-68,-65,-63,-58,-68,-64,]),'SEMICOLON':([4,19,20,25,27,32,42,52,53,55,56,74,75,76,81,84,86,87,88,89,92,93,96,106,109,110,122,129,136,137,138,139,140,143,144,145,146,147,148,150,152,155,164,170,175,],[5,-83,-12,51,-16,-29,66,-83,-12,-55,-83,-15,-13,-56,-42,-45,-49,-52,-53,-54,-34,-37,123,-30,-50,-51,149,154,-43,-44,-46,-47,-48,-35,-36,-38,-39,-40,-41,-67,-78,-14,173,-31,179,]),'L_BRACE':([5,6,7,8,9,17,18,51,77,79,114,115,151,162,165,169,171,176,181,182,],[-83,16,-83,-83,-5,-3,-4,-11,103,105,142,-59,-67,-61,142,-70,-62,142,142,-69,]),'INT':([5,7,8,16,21,22,24,34,35,38,39,40,41,43,51,58,66,103,105,123,141,149,154,161,169,172,174,178,180,182,183,184,185,],[13,13,13,-9,13,13,13,13,13,-22,-23,-24,-25,-27,-11,13,-26,13,13,-28,-60,-32,-33,-57,-70,-19,-68,-65,-63,-69,-58,-68,-64,]),'FLOAT':([5,7,8,16,21,22,24,34,35,38,39,40,41,43,51,58,66,103,105,123,141,149,154,161,169,172,174,178,180,182,183,184,185,],[14,14,14,-9,14,14,14,14,14,-22,-23,-24,-25,-27,-11,14,-26,14,14,-28,-60,-32,-33,-57,-70,-19,-68,-65,-63,-69,-58,-68,-64,]),'VOID':([5,7,8,51,169,182,],[15,15,15,-11,-70,-69,]),'L_PARENTHESIS':([11,12,20,23,32,44,45,47,48,49,50,62,67,69,71,72,85,97,98,107,108,111,112,116,117,118,119,120,121,123,124,127,135,167,],[21,22,-73,-74,-79,67,68,70,-66,72,73,85,85,85,98,85,85,-66,85,85,85,85,85,85,85,85,85,85,85,-28,85,85,85,85,]),'IF':([16,24,34,35,38,39,40,41,43,51,66,103,105,123,131,132,133,134,141,142,149,154,157,161,172,174,178,180,183,184,185,],[-9,44,44,44,-22,-23,-24,-25,-27,-11,-26,-83,-83,-28,44,-71,-72,44,-60,44,-32,-33,44,-57,-19,-68,-65,-63,-58,-68,-64,]),'READ':([16,24,34,35,38,39,40,41,43,51,66,103,105,123,131,132,133,134,141,142,149,154,157,161,172,174,178,180,183,184,185,],[-9,45,45,45,-22,-23,-24,-25,-27,-11,-26,-83,-83,-28,45,-71,-72,45,-60,45,-32,-33,45,-57,-19,-68,-65,-63,-58,-68,-64,]),'FOR':([16,24,34,35,38,39,40,41,43,51,66,103,105,123,131,132,133,134,141,142,149,154,157,161,172,174,178,180,183,184,185,],[-9,47,47,47,-22,-23,-24,-25,-27,-11,-26,-83,-83,-28,47,-71,-72,47,-60,47,-32,-33,47,-57,-19,-68,-65,-63,-58,-68,-64,]),'WHILE':([16,24,34,35,38,39,40,41,43,51,66,103,105,123,131,132,133,134,141,142,149,154,157,161,172,174,178,180,183,184,185,],[-9,48,48,48,-22,-23,-24,-25,-27,-11,-26,-83,-83,-28,48,-71,-72,48,-60,48,-32,-33,48,-57,-19,-68,-65,-63,-58,-68,-64,]),'PRINT':([16,24,34,35,38,39,40,41,43,51,66,103,105,123,131,132,133,134,141,142,149,154,157,161,172,174,178,180,183,184,185,],[-9,50,50,50,-22,-23,-24,-25,-27,-11,-26,-83,-83,-28,50,-71,-72,50,-60,50,-32,-33,50,-57,-19,-68,-65,-63,-58,-68,-64,]),'R_BRACE':([16,24,33,34,35,36,38,39,40,41,43,51,64,65,66,105,123,132,133,134,141,142,149,154,157,158,159,161,163,168,172,174,178,179,180,183,184,185,],[-9,-83,63,-83,-83,-8,-22,-23,-24,-25,-27,-11,-6,-7,-26,-83,-28,-71,-72,-83,-60,-83,-32,-33,-83,-21,169,-57,172,-20,-19,-68,-65,182,-63,-58,-68,-64,]),'COMMA':([19,20,29,31,32,52,53,55,56,60,75,76,78,81,84,86,87,88,89,99,100,106,109,110,136,137,138,139,140,152,153,155,170,],[26,-12,58,58,-29,26,-12,-55,-83,-75,-13,-56,58,-42,-45,-49,-52,-53,-54,127,-80,-30,-50,-51,-43,-44,-46,-47,-48,-78,127,-14,-31,]),'L_BRACKET':([20,32,53,75,95,106,],[28,62,28,102,62,135,]),'CONST_INT':([28,62,67,69,72,82,83,85,97,98,102,107,108,111,112,116,117,118,119,120,121,123,124,127,135,167,],[55,55,55,55,55,55,55,55,-66,55,55,55,55,55,55,55,55,55,55,55,55,-28,55,55,55,55,]),'CONST_FLOAT':([28,62,67,69,72,82,83,85,97,98,102,107,108,111,112,116,117,118,119,120,121,123,124,127,135,167,],[56,56,56,56,56,56,56,56,-66,56,56,56,56,56,56,56,56,56,56,56,56,-28,56,56,56,56,]),'R_PARENTHESIS':([29,31,32,53,55,56,57,59,60,61,75,76,78,81,84,86,87,88,89,91,92,93,94,95,99,100,101,104,106,109,110,113,123,125,126,128,136,137,138,139,140,143,144,145,146,147,148,152,153,155,166,170,177,],[-83,-83,-29,-12,-55,-83,77,-77,-75,79,-13,-56,-83,-42,-45,-49,-52,-53,-54,115,-34,-37,122,-29,-83,-80,129,-76,-30,-50,-51,140,-28,151,152,-82,-43,-44,-46,-47,-48,-35,-36,-38,-39,-40,-41,-78,-83,-14,-81,-31,181,]),'ASSIGN':([32,46,95,106,170,],[-29,69,-29,-30,-31,]),'MULTIP':([32,55,56,76,84,86,87,88,89,106,109,110,140,152,170,],[-29,-55,-83,-56,111,-49,-52,-53,-54,-30,-50,-51,-48,-78,-31,]),'DIVIDE':([32,55,56,76,84,86,87,88,89,106,109,110,140,152,170,],[-29,-55,-83,-56,112,-49,-52,-53,-54,-30,-50,-51,-48,-78,-31,]),'PLUS':([32,55,56,62,67,69,72,76,81,84,85,86,87,88,89,97,98,106,107,108,109,110,111,112,116,117,118,119,120,121,123,124,127,135,138,139,140,152,167,170,],[-29,-55,-83,82,82,82,82,-56,107,-45,82,-49,-52,-53,-54,-66,82,-30,82,82,-50,-51,82,82,82,82,82,82,82,82,-28,82,82,82,-46,-47,-48,-78,82,-31,]),'MINUS':([32,55,56,62,67,69,72,76,81,84,85,86,87,88,89,97,98,106,107,108,109,110,111,112,116,117,118,119,120,121,123,124,127,135,138,139,140,152,167,170,],[-29,-55,-83,83,83,83,83,-56,108,-45,83,-49,-52,-53,-54,-66,83,-30,83,83,-50,-51,83,83,83,83,83,83,83,83,-28,83,83,83,-46,-47,-48,-78,83,-31,]),'R_BRACKET':([32,54,55,56,76,80,81,84,86,87,88,89,106,109,110,130,136,137,138,139,140,152,160,170,],[-29,75,-55,-83,-56,106,-42,-45,-49,-52,-53,-54,-30,-50,-51,155,-43,-44,-46,-47,-48,-78,170,-31,]),'GREATER_THAN':([32,55,56,76,81,84,86,87,88,89,93,106,109,110,136,137,138,139,140,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,118,-30,-50,-51,-43,-44,-46,-47,-48,-78,-31,]),'LESS_THAN':([32,55,56,76,81,84,86,87,88,89,93,106,109,110,136,137,138,139,140,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,119,-30,-50,-51,-43,-44,-46,-47,-48,-78,-31,]),'EQUALS_TO':([32,55,56,76,81,84,86,87,88,89,93,106,109,110,136,137,138,139,140,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,120,-30,-50,-51,-43,-44,-46,-47,-48,-78,-31,]),'DIFF_THAN':([32,55,56,76,81,84,86,87,88,89,93,106,109,110,136,137,138,139,140,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,121,-30,-50,-51,-43,-44,-46,-47,-48,-78,-31,]),'AND':([32,55,56,76,81,84,86,87,88,89,92,93,106,109,110,136,137,138,139,140,145,146,147,148,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,116,-37,-30,-50,-51,-43,-44,-46,-47,-48,-38,-39,-40,-41,-78,-31,]),'OR':([32,55,56,76,81,84,86,87,88,89,92,93,106,109,110,136,137,138,139,140,145,146,147,148,152,170,],[-29,-55,-83,-56,-42,-45,-49,-52,-53,-54,117,-37,-30,-50,-51,-43,-44,-46,-47,-48,-38,-39,-40,-41,-78,-31,]),'RETURN':([38,39,40,41,43,51,66,103,123,131,132,133,141,149,154,156,157,158,161,168,172,174,178,180,183,184,185,],[-22,-23,-24,-25,-27,-11,-26,-83,-28,-83,-71,-72,-60,-32,-33,167,-83,-21,-57,-20,-19,-68,-65,-63,-58,-68,-64,]),'ELSE':([141,172,],[162,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'progr':([0,],[1,]),'neurProStart':([0,],[2,]),'pro1':([5,7,8,],[6,17,18,]),'vars':([5,7,8,24,34,35,103,105,],[7,7,7,34,34,34,132,132,]),'funcion':([5,7,8,],[8,8,8,]),'empty':([5,7,8,19,24,29,31,34,35,52,56,78,99,103,105,131,134,142,153,157,],[9,9,9,27,36,59,59,36,36,27,76,59,128,133,133,158,158,158,128,158,]),'tipo':([5,7,8,21,22,24,34,35,58,103,105,],[10,10,10,30,30,37,37,37,30,37,37,]),'neurFunc':([5,7,8,],[11,11,11,]),'neurFuncVoid':([5,7,8,],[12,12,12,]),'vars1':([10,26,30,37,],[19,52,60,19,]),'neurPro1':([16,],[24,]),'vars2':([19,52,],[25,74,]),'neurFunc2':([21,22,58,],[29,31,78,]),'pro2':([24,34,35,],[33,64,65,]),'estatuto':([24,34,35,131,134,142,157,],[35,35,35,157,157,157,157,]),'condicion':([24,34,35,131,134,142,157,],[38,38,38,38,38,38,38,]),'lectura':([24,34,35,131,134,142,157,],[39,39,39,39,39,39,39,]),'ciclo':([24,34,35,131,134,142,157,],[40,40,40,40,40,40,40,]),'asignacion':([24,34,35,70,131,134,142,157,173,],[41,41,41,97,41,41,41,41,177,]),'funcionLL':([24,34,35,62,67,69,72,82,83,85,98,107,108,111,112,116,117,118,119,120,121,124,127,131,134,135,142,157,167,],[42,42,42,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,42,42,88,42,42,88,]),'impresion':([24,34,35,131,134,142,157,],[43,43,43,43,43,43,43,]),'datStr':([24,34,35,62,67,68,69,70,72,73,82,83,85,98,107,108,111,112,116,117,118,119,120,121,124,127,131,134,135,142,157,167,173,],[46,46,46,87,87,94,87,46,87,101,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,46,46,87,46,46,87,46,]),'neurFuncLL':([24,34,35,62,67,69,72,82,83,85,98,107,108,111,112,116,117,118,119,120,121,124,127,131,134,135,142,157,167,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'cte':([28,62,67,69,72,82,83,85,98,102,107,108,111,112,116,117,118,119,120,121,124,127,135,167,],[54,89,89,89,89,89,89,89,89,130,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'funcion1':([29,31,78,],[57,61,104,]),'neurCiclo1':([48,97,],[71,124,]),'exp':([62,67,69,72,85,98,107,108,116,117,118,119,120,121,124,127,135,167,],[80,93,96,100,93,93,136,137,93,93,145,146,147,148,93,153,160,93,]),'termino':([62,67,69,72,85,98,107,108,111,112,116,117,118,119,120,121,124,127,135,167,],[81,81,81,81,81,81,81,81,138,139,81,81,81,81,81,81,81,81,81,81,]),'factor':([62,67,69,72,85,98,107,108,111,112,116,117,118,119,120,121,124,127,135,167,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'factor1':([62,67,69,72,82,83,85,98,107,108,111,112,116,117,118,119,120,121,124,127,135,167,],[86,86,86,86,109,110,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'neurPro':([63,],[90,]),'expresion':([67,85,98,124,167,],[91,113,125,150,175,]),'expOp':([67,85,98,116,117,124,167,],[92,92,92,143,144,92,92,]),'neurFuncLL2':([72,],[99,]),'neurCond1':([91,],[114,]),'funcionLL1':([99,153,],[126,166,]),'funcionVars':([103,105,],[131,134,]),'bloque':([114,165,176,181,],[141,174,180,184,]),'bloque1':([131,134,142,157,],[156,159,163,168,]),'neurCond2':([141,],[161,]),'neurCiclo2':([150,151,],[164,165,]),'neurCond2x1':([162,],[171,]),'neurCond3':([171,],[176,]),'neurCiclo3':([174,184,],[178,185,]),'neurCond4':([180,],[183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> progr","S'",1,None,None,None),
  ('progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro','progr',10,'p_progr','Ayotl_parserF.py',698),
  ('neurProStart -> <empty>','neurProStart',0,'p_neurProStart','Ayotl_parserF.py',723),
  ('pro1 -> vars pro1','pro1',2,'p_pro1','Ayotl_parserF.py',729),
  ('pro1 -> funcion pro1','pro1',2,'p_pro1','Ayotl_parserF.py',730),
  ('pro1 -> empty','pro1',1,'p_pro1','Ayotl_parserF.py',731),
  ('pro2 -> vars pro2','pro2',2,'p_pro2','Ayotl_parserF.py',737),
  ('pro2 -> estatuto pro2','pro2',2,'p_pro2','Ayotl_parserF.py',738),
  ('pro2 -> empty','pro2',1,'p_pro2','Ayotl_parserF.py',739),
  ('neurPro1 -> <empty>','neurPro1',0,'p_neurPro1','Ayotl_parserF.py',747),
  ('neurPro -> <empty>','neurPro',0,'p_neurPro','Ayotl_parserF.py',757),
  ('vars -> tipo vars1 vars2 SEMICOLON','vars',4,'p_vars','Ayotl_parserF.py',767),
  ('vars1 -> CONST_ID','vars1',1,'p_vars1','Ayotl_parserF.py',783),
  ('vars1 -> CONST_ID L_BRACKET cte R_BRACKET','vars1',4,'p_vars1','Ayotl_parserF.py',784),
  ('vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET','vars1',7,'p_vars1','Ayotl_parserF.py',785),
  ('vars2 -> COMMA vars1 vars2','vars2',3,'p_vars2','Ayotl_parserF.py',859),
  ('vars2 -> empty','vars2',1,'p_vars2','Ayotl_parserF.py',860),
  ('tipo -> INT','tipo',1,'p_tipo','Ayotl_parserF.py',867),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Ayotl_parserF.py',868),
  ('bloque -> L_BRACE bloque1 R_BRACE','bloque',3,'p_bloque','Ayotl_parserF.py',876),
  ('bloque1 -> estatuto bloque1','bloque1',2,'p_bloque1','Ayotl_parserF.py',882),
  ('bloque1 -> empty','bloque1',1,'p_bloque1','Ayotl_parserF.py',883),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','Ayotl_parserF.py',889),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','Ayotl_parserF.py',890),
  ('estatuto -> ciclo','estatuto',1,'p_estatuto','Ayotl_parserF.py',891),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','Ayotl_parserF.py',892),
  ('estatuto -> funcionLL SEMICOLON','estatuto',2,'p_estatuto','Ayotl_parserF.py',893),
  ('estatuto -> impresion','estatuto',1,'p_estatuto','Ayotl_parserF.py',894),
  ('asignacion -> datStr ASSIGN exp SEMICOLON','asignacion',4,'p_asignacion','Ayotl_parserF.py',900),
  ('datStr -> CONST_ID','datStr',1,'p_datStr','Ayotl_parserF.py',910),
  ('datStr -> CONST_ID L_BRACKET exp R_BRACKET','datStr',4,'p_datStr','Ayotl_parserF.py',911),
  ('datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET','datStr',7,'p_datStr','Ayotl_parserF.py',912),
  ('lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON','lectura',5,'p_lectura','Ayotl_parserF.py',1043),
  ('impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','Ayotl_parserF.py',1051),
  ('expresion -> expOp','expresion',1,'p_expresion','Ayotl_parserF.py',1058),
  ('expresion -> expOp AND expOp','expresion',3,'p_expresion','Ayotl_parserF.py',1059),
  ('expresion -> expOp OR expOp','expresion',3,'p_expresion','Ayotl_parserF.py',1060),
  ('expOp -> exp','expOp',1,'p_expOp','Ayotl_parserF.py',1080),
  ('expOp -> exp GREATER_THAN exp','expOp',3,'p_expOp','Ayotl_parserF.py',1081),
  ('expOp -> exp LESS_THAN exp','expOp',3,'p_expOp','Ayotl_parserF.py',1082),
  ('expOp -> exp EQUALS_TO exp','expOp',3,'p_expOp','Ayotl_parserF.py',1083),
  ('expOp -> exp DIFF_THAN exp','expOp',3,'p_expOp','Ayotl_parserF.py',1084),
  ('exp -> termino','exp',1,'p_exp','Ayotl_parserF.py',1108),
  ('exp -> termino PLUS exp','exp',3,'p_exp','Ayotl_parserF.py',1109),
  ('exp -> termino MINUS exp','exp',3,'p_exp','Ayotl_parserF.py',1110),
  ('termino -> factor','termino',1,'p_termino','Ayotl_parserF.py',1141),
  ('termino -> factor MULTIP termino','termino',3,'p_termino','Ayotl_parserF.py',1142),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','Ayotl_parserF.py',1143),
  ('factor -> L_PARENTHESIS expresion R_PARENTHESIS','factor',3,'p_factor','Ayotl_parserF.py',1176),
  ('factor -> factor1','factor',1,'p_factor','Ayotl_parserF.py',1177),
  ('factor -> PLUS factor1','factor',2,'p_factor','Ayotl_parserF.py',1178),
  ('factor -> MINUS factor1','factor',2,'p_factor','Ayotl_parserF.py',1179),
  ('factor1 -> datStr','factor1',1,'p_factor1','Ayotl_parserF.py',1205),
  ('factor1 -> funcionLL','factor1',1,'p_factor1','Ayotl_parserF.py',1206),
  ('factor1 -> cte','factor1',1,'p_factor1','Ayotl_parserF.py',1207),
  ('cte -> CONST_INT','cte',1,'p_cte','Ayotl_parserF.py',1214),
  ('cte -> CONST_FLOAT empty','cte',2,'p_cte','Ayotl_parserF.py',1215),
  ('condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2','condicion',6,'p_condicion','Ayotl_parserF.py',1229),
  ('condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4','condicion',10,'p_condicion','Ayotl_parserF.py',1230),
  ('neurCond1 -> R_PARENTHESIS','neurCond1',1,'p_neurCond1','Ayotl_parserF.py',1236),
  ('neurCond2 -> <empty>','neurCond2',0,'p_neurCond2','Ayotl_parserF.py',1244),
  ('neurCond2x1 -> <empty>','neurCond2x1',0,'p_neurCond2x1','Ayotl_parserF.py',1254),
  ('neurCond3 -> <empty>','neurCond3',0,'p_neurCond3','Ayotl_parserF.py',1264),
  ('neurCond4 -> <empty>','neurCond4',0,'p_neurCond4','Ayotl_parserF.py',1272),
  ('ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3','ciclo',11,'p_ciclo','Ayotl_parserF.py',1285),
  ('ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3','ciclo',8,'p_ciclo','Ayotl_parserF.py',1286),
  ('neurCiclo1 -> <empty>','neurCiclo1',0,'p_neurCiclo1','Ayotl_parserF.py',1293),
  ('neurCiclo2 -> <empty>','neurCiclo2',0,'p_neurCiclo2','Ayotl_parserF.py',1300),
  ('neurCiclo3 -> <empty>','neurCiclo3',0,'p_neurCiclo3','Ayotl_parserF.py',1308),
  ('funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE','funcion',12,'p_funcion','Ayotl_parserF.py',1321),
  ('funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE','funcion',9,'p_funcion','Ayotl_parserF.py',1322),
  ('funcionVars -> vars','funcionVars',1,'p_funcionVars','Ayotl_parserF.py',1349),
  ('funcionVars -> empty','funcionVars',1,'p_funcionVars','Ayotl_parserF.py',1350),
  ('neurFunc -> tipo CONST_ID','neurFunc',2,'p_neurFunc','Ayotl_parserF.py',1356),
  ('neurFuncVoid -> VOID CONST_ID','neurFuncVoid',2,'p_neurFuncVoid','Ayotl_parserF.py',1373),
  ('neurFunc2 -> tipo vars1','neurFunc2',2,'p_neurFunc2','Ayotl_parserF.py',1393),
  ('funcion1 -> COMMA neurFunc2 funcion1','funcion1',3,'p_funcion1','Ayotl_parserF.py',1408),
  ('funcion1 -> empty','funcion1',1,'p_funcion1','Ayotl_parserF.py',1409),
  ('funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS','funcionLL',5,'p_funcionLL','Ayotl_parserF.py',1422),
  ('neurFuncLL -> CONST_ID','neurFuncLL',1,'p_neurFuncLL','Ayotl_parserF.py',1455),
  ('neurFuncLL2 -> exp','neurFuncLL2',1,'p_neurFuncLL2','Ayotl_parserF.py',1463),
  ('funcionLL1 -> COMMA exp funcionLL1','funcionLL1',3,'p_funcionLL1','Ayotl_parserF.py',1474),
  ('funcionLL1 -> empty','funcionLL1',1,'p_funcionLL1','Ayotl_parserF.py',1475),
  ('empty -> <empty>','empty',0,'p_empty','Ayotl_parserF.py',1497),
]
