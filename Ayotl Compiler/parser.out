Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> progr
Rule 1     progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro
Rule 2     neurProStart -> <empty>
Rule 3     pro1 -> vars pro1
Rule 4     pro1 -> funcion pro1
Rule 5     pro1 -> empty
Rule 6     pro2 -> vars pro2
Rule 7     pro2 -> estatuto pro2
Rule 8     pro2 -> empty
Rule 9     neurPro1 -> <empty>
Rule 10    neurPro -> <empty>
Rule 11    vars -> tipo vars1 vars2 SEMICOLON
Rule 12    vars1 -> CONST_ID
Rule 13    vars1 -> CONST_ID L_BRACKET cte R_BRACKET
Rule 14    vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET
Rule 15    vars2 -> COMMA vars1 vars2
Rule 16    vars2 -> empty
Rule 17    tipo -> INT
Rule 18    tipo -> FLOAT
Rule 19    bloque -> L_BRACE bloque1 R_BRACE
Rule 20    bloque1 -> estatuto bloque1
Rule 21    bloque1 -> empty
Rule 22    estatuto -> condicion
Rule 23    estatuto -> lectura
Rule 24    estatuto -> ciclo
Rule 25    estatuto -> asignacion
Rule 26    estatuto -> funcionLL SEMICOLON
Rule 27    estatuto -> impresion
Rule 28    asignacion -> datStr ASSIGN exp SEMICOLON
Rule 29    datStr -> CONST_ID
Rule 30    datStr -> CONST_ID L_BRACKET exp R_BRACKET
Rule 31    datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
Rule 32    lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
Rule 33    impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
Rule 34    expresion -> expOp
Rule 35    expresion -> expOp AND expOp
Rule 36    expresion -> expOp OR expOp
Rule 37    expOp -> exp
Rule 38    expOp -> exp GREATER_THAN exp
Rule 39    expOp -> exp LESS_THAN exp
Rule 40    expOp -> exp EQUALS_TO exp
Rule 41    expOp -> exp DIFF_THAN exp
Rule 42    exp -> termino
Rule 43    exp -> termino PLUS exp
Rule 44    exp -> termino MINUS exp
Rule 45    termino -> factor
Rule 46    termino -> factor MULTIP termino
Rule 47    termino -> factor DIVIDE termino
Rule 48    factor -> L_PARENTHESIS expresion R_PARENTHESIS
Rule 49    factor -> factor1
Rule 50    factor -> PLUS factor1
Rule 51    factor -> MINUS factor1
Rule 52    factor1 -> datStr
Rule 53    factor1 -> funcionLL
Rule 54    factor1 -> cte
Rule 55    cte -> CONST_INT
Rule 56    cte -> CONST_FLOAT empty
Rule 57    condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
Rule 58    condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
Rule 59    neurCond1 -> R_PARENTHESIS
Rule 60    neurCond2 -> <empty>
Rule 61    neurCond2x1 -> <empty>
Rule 62    neurCond3 -> <empty>
Rule 63    neurCond4 -> <empty>
Rule 64    ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
Rule 65    ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
Rule 66    neurCiclo1 -> <empty>
Rule 67    neurCiclo2 -> <empty>
Rule 68    neurCiclo3 -> <empty>
Rule 69    funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
Rule 70    funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
Rule 71    funcionVars -> vars
Rule 72    funcionVars -> empty
Rule 73    neurFunc -> tipo CONST_ID
Rule 74    neurFuncVoid -> VOID CONST_ID
Rule 75    neurFunc2 -> tipo vars1
Rule 76    funcion1 -> COMMA neurFunc2 funcion1
Rule 77    funcion1 -> empty
Rule 78    funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
Rule 79    neurFuncLL -> CONST_ID
Rule 80    neurFuncLL2 -> exp
Rule 81    funcionLL1 -> COMMA exp funcionLL1
Rule 82    funcionLL1 -> empty
Rule 83    empty -> <empty>

Terminals, with rules where they appear

AND                  : 35
ASSIGN               : 28
COMMA                : 15 76 81
CONST_FLOAT          : 56
CONST_ID             : 1 12 13 14 29 30 31 73 74 79
CONST_INT            : 55
DIFF_THAN            : 41
DIVIDE               : 47
ELSE                 : 58
EQUALS_TO            : 40
FLOAT                : 18
FOR                  : 64
GREATER_THAN         : 38
IF                   : 57 58
INT                  : 17
LESS_THAN            : 39
L_BRACE              : 1 19 69 70
L_BRACKET            : 13 14 14 30 31 31
L_PARENTHESIS        : 32 33 48 57 58 64 65 69 70 78
MINUS                : 44 51
MULTIP               : 46
OR                   : 36
PLUS                 : 43 50
PRINT                : 33
PROGRAM              : 1
READ                 : 32
RETURN               : 69
R_BRACE              : 1 19 69 70
R_BRACKET            : 13 14 14 30 31 31
R_PARENTHESIS        : 32 33 48 59 64 65 69 70 78
SEMICOLON            : 1 11 26 28 32 33 64 69
VOID                 : 74
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

asignacion           : 25 64 64
bloque               : 57 58 58 64 65
bloque1              : 19 20 69 70
ciclo                : 24
condicion            : 22
cte                  : 13 14 14 54
datStr               : 28 32 33 52
empty                : 5 8 16 21 56 72 77 82
estatuto             : 7 20
exp                  : 28 30 31 31 37 38 38 39 39 40 40 41 41 43 44 80 81
expOp                : 34 35 35 36 36
expresion            : 48 57 58 64 65 69
factor               : 45 46 47
factor1              : 49 50 51
funcion              : 4
funcion1             : 69 70 76
funcionLL            : 26 53
funcionLL1           : 78 81
funcionVars          : 69 70
impresion            : 27
lectura              : 23
neurCiclo1           : 64 65
neurCiclo2           : 64 65
neurCiclo3           : 64 65
neurCond1            : 57 58
neurCond2            : 57
neurCond2x1          : 58
neurCond3            : 58
neurCond4            : 58
neurFunc             : 69
neurFunc2            : 69 70 76
neurFuncLL           : 78
neurFuncLL2          : 78
neurFuncVoid         : 70
neurPro              : 1
neurPro1             : 1
neurProStart         : 1
pro1                 : 1 3 4
pro2                 : 1 6 7
progr                : 0
termino              : 42 43 44 46 47
tipo                 : 11 73 75
vars                 : 3 6 71
vars1                : 11 15 75
vars2                : 11 15

Parsing method: LALR

state 0

    (0) S' -> . progr
    (1) progr -> . neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro
    (2) neurProStart -> .

    PROGRAM         reduce using rule 2 (neurProStart -> .)

    progr                          shift and go to state 1
    neurProStart                   shift and go to state 2

state 1

    (0) S' -> progr .



state 2

    (1) progr -> neurProStart . PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro

    PROGRAM         shift and go to state 3


state 3

    (1) progr -> neurProStart PROGRAM . CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro

    CONST_ID        shift and go to state 4


state 4

    (1) progr -> neurProStart PROGRAM CONST_ID . SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro

    SEMICOLON       shift and go to state 5


state 5

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON . pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro
    (3) pro1 -> . vars pro1
    (4) pro1 -> . funcion pro1
    (5) pro1 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (69) funcion -> . neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (70) funcion -> . neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (73) neurFunc -> . tipo CONST_ID
    (74) neurFuncVoid -> . VOID CONST_ID

    L_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    VOID            shift and go to state 15

    pro1                           shift and go to state 6
    vars                           shift and go to state 7
    funcion                        shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 10
    neurFunc                       shift and go to state 11
    neurFuncVoid                   shift and go to state 12

state 6

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 . L_BRACE neurPro1 pro2 R_BRACE neurPro

    L_BRACE         shift and go to state 16


state 7

    (3) pro1 -> vars . pro1
    (3) pro1 -> . vars pro1
    (4) pro1 -> . funcion pro1
    (5) pro1 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (69) funcion -> . neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (70) funcion -> . neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (73) neurFunc -> . tipo CONST_ID
    (74) neurFuncVoid -> . VOID CONST_ID

    L_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    VOID            shift and go to state 15

    vars                           shift and go to state 7
    pro1                           shift and go to state 17
    funcion                        shift and go to state 8
    empty                          shift and go to state 9
    tipo                           shift and go to state 10
    neurFunc                       shift and go to state 11
    neurFuncVoid                   shift and go to state 12

state 8

    (4) pro1 -> funcion . pro1
    (3) pro1 -> . vars pro1
    (4) pro1 -> . funcion pro1
    (5) pro1 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (69) funcion -> . neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (70) funcion -> . neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (73) neurFunc -> . tipo CONST_ID
    (74) neurFuncVoid -> . VOID CONST_ID

    L_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    VOID            shift and go to state 15

    funcion                        shift and go to state 8
    pro1                           shift and go to state 18
    vars                           shift and go to state 7
    empty                          shift and go to state 9
    tipo                           shift and go to state 10
    neurFunc                       shift and go to state 11
    neurFuncVoid                   shift and go to state 12

state 9

    (5) pro1 -> empty .

    L_BRACE         reduce using rule 5 (pro1 -> empty .)


state 10

    (11) vars -> tipo . vars1 vars2 SEMICOLON
    (73) neurFunc -> tipo . CONST_ID
    (12) vars1 -> . CONST_ID
    (13) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET
    (14) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    CONST_ID        shift and go to state 20

    vars1                          shift and go to state 19

state 11

    (69) funcion -> neurFunc . L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE

    L_PARENTHESIS   shift and go to state 21


state 12

    (70) funcion -> neurFuncVoid . L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE

    L_PARENTHESIS   shift and go to state 22


state 13

    (17) tipo -> INT .

    CONST_ID        reduce using rule 17 (tipo -> INT .)


state 14

    (18) tipo -> FLOAT .

    CONST_ID        reduce using rule 18 (tipo -> FLOAT .)


state 15

    (74) neurFuncVoid -> VOID . CONST_ID

    CONST_ID        shift and go to state 23


state 16

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE . neurPro1 pro2 R_BRACE neurPro
    (9) neurPro1 -> .

    INT             reduce using rule 9 (neurPro1 -> .)
    FLOAT           reduce using rule 9 (neurPro1 -> .)
    IF              reduce using rule 9 (neurPro1 -> .)
    READ            reduce using rule 9 (neurPro1 -> .)
    FOR             reduce using rule 9 (neurPro1 -> .)
    WHILE           reduce using rule 9 (neurPro1 -> .)
    PRINT           reduce using rule 9 (neurPro1 -> .)
    CONST_ID        reduce using rule 9 (neurPro1 -> .)
    R_BRACE         reduce using rule 9 (neurPro1 -> .)

    neurPro1                       shift and go to state 24

state 17

    (3) pro1 -> vars pro1 .

    L_BRACE         reduce using rule 3 (pro1 -> vars pro1 .)


state 18

    (4) pro1 -> funcion pro1 .

    L_BRACE         reduce using rule 4 (pro1 -> funcion pro1 .)


state 19

    (11) vars -> tipo vars1 . vars2 SEMICOLON
    (15) vars2 -> . COMMA vars1 vars2
    (16) vars2 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 83 (empty -> .)

    vars2                          shift and go to state 25
    empty                          shift and go to state 27

state 20

    (73) neurFunc -> tipo CONST_ID .
    (12) vars1 -> CONST_ID .
    (13) vars1 -> CONST_ID . L_BRACKET cte R_BRACKET
    (14) vars1 -> CONST_ID . L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    L_PARENTHESIS   reduce using rule 73 (neurFunc -> tipo CONST_ID .)
    COMMA           reduce using rule 12 (vars1 -> CONST_ID .)
    SEMICOLON       reduce using rule 12 (vars1 -> CONST_ID .)
    L_BRACKET       shift and go to state 28


state 21

    (69) funcion -> neurFunc L_PARENTHESIS . neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (75) neurFunc2 -> . tipo vars1
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    neurFunc2                      shift and go to state 29
    tipo                           shift and go to state 30

state 22

    (70) funcion -> neurFuncVoid L_PARENTHESIS . neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
    (75) neurFunc2 -> . tipo vars1
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    neurFunc2                      shift and go to state 31
    tipo                           shift and go to state 30

state 23

    (74) neurFuncVoid -> VOID CONST_ID .

    L_PARENTHESIS   reduce using rule 74 (neurFuncVoid -> VOID CONST_ID .)


state 24

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 . pro2 R_BRACE neurPro
    (6) pro2 -> . vars pro2
    (7) pro2 -> . estatuto pro2
    (8) pro2 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    R_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    pro2                           shift and go to state 33
    vars                           shift and go to state 34
    estatuto                       shift and go to state 35
    empty                          shift and go to state 36
    tipo                           shift and go to state 37
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 25

    (11) vars -> tipo vars1 vars2 . SEMICOLON

    SEMICOLON       shift and go to state 51


state 26

    (15) vars2 -> COMMA . vars1 vars2
    (12) vars1 -> . CONST_ID
    (13) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET
    (14) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    CONST_ID        shift and go to state 53

    vars1                          shift and go to state 52

state 27

    (16) vars2 -> empty .

    SEMICOLON       reduce using rule 16 (vars2 -> empty .)


state 28

    (13) vars1 -> CONST_ID L_BRACKET . cte R_BRACKET
    (14) vars1 -> CONST_ID L_BRACKET . cte R_BRACKET L_BRACKET cte R_BRACKET
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty

    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    cte                            shift and go to state 54

state 29

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 . funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (76) funcion1 -> . COMMA neurFunc2 funcion1
    (77) funcion1 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 58
    R_PARENTHESIS   reduce using rule 83 (empty -> .)

    funcion1                       shift and go to state 57
    empty                          shift and go to state 59

state 30

    (75) neurFunc2 -> tipo . vars1
    (12) vars1 -> . CONST_ID
    (13) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET
    (14) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    CONST_ID        shift and go to state 53

    vars1                          shift and go to state 60

state 31

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 . funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE
    (76) funcion1 -> . COMMA neurFunc2 funcion1
    (77) funcion1 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 58
    R_PARENTHESIS   reduce using rule 83 (empty -> .)

    funcion1                       shift and go to state 61
    empty                          shift and go to state 59

state 32

    (29) datStr -> CONST_ID .
    (30) datStr -> CONST_ID . L_BRACKET exp R_BRACKET
    (31) datStr -> CONST_ID . L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> CONST_ID .

    ASSIGN          reduce using rule 29 (datStr -> CONST_ID .)
    MULTIP          reduce using rule 29 (datStr -> CONST_ID .)
    DIVIDE          reduce using rule 29 (datStr -> CONST_ID .)
    PLUS            reduce using rule 29 (datStr -> CONST_ID .)
    MINUS           reduce using rule 29 (datStr -> CONST_ID .)
    R_BRACKET       reduce using rule 29 (datStr -> CONST_ID .)
    GREATER_THAN    reduce using rule 29 (datStr -> CONST_ID .)
    LESS_THAN       reduce using rule 29 (datStr -> CONST_ID .)
    EQUALS_TO       reduce using rule 29 (datStr -> CONST_ID .)
    DIFF_THAN       reduce using rule 29 (datStr -> CONST_ID .)
    AND             reduce using rule 29 (datStr -> CONST_ID .)
    OR              reduce using rule 29 (datStr -> CONST_ID .)
    R_PARENTHESIS   reduce using rule 29 (datStr -> CONST_ID .)
    SEMICOLON       reduce using rule 29 (datStr -> CONST_ID .)
    COMMA           reduce using rule 29 (datStr -> CONST_ID .)
    L_BRACKET       shift and go to state 62
    L_PARENTHESIS   reduce using rule 79 (neurFuncLL -> CONST_ID .)


state 33

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 . R_BRACE neurPro

    R_BRACE         shift and go to state 63


state 34

    (6) pro2 -> vars . pro2
    (6) pro2 -> . vars pro2
    (7) pro2 -> . estatuto pro2
    (8) pro2 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    R_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    vars                           shift and go to state 34
    pro2                           shift and go to state 64
    estatuto                       shift and go to state 35
    empty                          shift and go to state 36
    tipo                           shift and go to state 37
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 35

    (7) pro2 -> estatuto . pro2
    (6) pro2 -> . vars pro2
    (7) pro2 -> . estatuto pro2
    (8) pro2 -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    R_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    estatuto                       shift and go to state 35
    pro2                           shift and go to state 65
    vars                           shift and go to state 34
    empty                          shift and go to state 36
    tipo                           shift and go to state 37
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 36

    (8) pro2 -> empty .

    R_BRACE         reduce using rule 8 (pro2 -> empty .)


state 37

    (11) vars -> tipo . vars1 vars2 SEMICOLON
    (12) vars1 -> . CONST_ID
    (13) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET
    (14) vars1 -> . CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    CONST_ID        shift and go to state 53

    vars1                          shift and go to state 19

state 38

    (22) estatuto -> condicion .

    INT             reduce using rule 22 (estatuto -> condicion .)
    FLOAT           reduce using rule 22 (estatuto -> condicion .)
    IF              reduce using rule 22 (estatuto -> condicion .)
    READ            reduce using rule 22 (estatuto -> condicion .)
    FOR             reduce using rule 22 (estatuto -> condicion .)
    WHILE           reduce using rule 22 (estatuto -> condicion .)
    PRINT           reduce using rule 22 (estatuto -> condicion .)
    CONST_ID        reduce using rule 22 (estatuto -> condicion .)
    R_BRACE         reduce using rule 22 (estatuto -> condicion .)
    RETURN          reduce using rule 22 (estatuto -> condicion .)


state 39

    (23) estatuto -> lectura .

    INT             reduce using rule 23 (estatuto -> lectura .)
    FLOAT           reduce using rule 23 (estatuto -> lectura .)
    IF              reduce using rule 23 (estatuto -> lectura .)
    READ            reduce using rule 23 (estatuto -> lectura .)
    FOR             reduce using rule 23 (estatuto -> lectura .)
    WHILE           reduce using rule 23 (estatuto -> lectura .)
    PRINT           reduce using rule 23 (estatuto -> lectura .)
    CONST_ID        reduce using rule 23 (estatuto -> lectura .)
    R_BRACE         reduce using rule 23 (estatuto -> lectura .)
    RETURN          reduce using rule 23 (estatuto -> lectura .)


state 40

    (24) estatuto -> ciclo .

    INT             reduce using rule 24 (estatuto -> ciclo .)
    FLOAT           reduce using rule 24 (estatuto -> ciclo .)
    IF              reduce using rule 24 (estatuto -> ciclo .)
    READ            reduce using rule 24 (estatuto -> ciclo .)
    FOR             reduce using rule 24 (estatuto -> ciclo .)
    WHILE           reduce using rule 24 (estatuto -> ciclo .)
    PRINT           reduce using rule 24 (estatuto -> ciclo .)
    CONST_ID        reduce using rule 24 (estatuto -> ciclo .)
    R_BRACE         reduce using rule 24 (estatuto -> ciclo .)
    RETURN          reduce using rule 24 (estatuto -> ciclo .)


state 41

    (25) estatuto -> asignacion .

    INT             reduce using rule 25 (estatuto -> asignacion .)
    FLOAT           reduce using rule 25 (estatuto -> asignacion .)
    IF              reduce using rule 25 (estatuto -> asignacion .)
    READ            reduce using rule 25 (estatuto -> asignacion .)
    FOR             reduce using rule 25 (estatuto -> asignacion .)
    WHILE           reduce using rule 25 (estatuto -> asignacion .)
    PRINT           reduce using rule 25 (estatuto -> asignacion .)
    CONST_ID        reduce using rule 25 (estatuto -> asignacion .)
    R_BRACE         reduce using rule 25 (estatuto -> asignacion .)
    RETURN          reduce using rule 25 (estatuto -> asignacion .)


state 42

    (26) estatuto -> funcionLL . SEMICOLON

    SEMICOLON       shift and go to state 66


state 43

    (27) estatuto -> impresion .

    INT             reduce using rule 27 (estatuto -> impresion .)
    FLOAT           reduce using rule 27 (estatuto -> impresion .)
    IF              reduce using rule 27 (estatuto -> impresion .)
    READ            reduce using rule 27 (estatuto -> impresion .)
    FOR             reduce using rule 27 (estatuto -> impresion .)
    WHILE           reduce using rule 27 (estatuto -> impresion .)
    PRINT           reduce using rule 27 (estatuto -> impresion .)
    CONST_ID        reduce using rule 27 (estatuto -> impresion .)
    R_BRACE         reduce using rule 27 (estatuto -> impresion .)
    RETURN          reduce using rule 27 (estatuto -> impresion .)


state 44

    (57) condicion -> IF . L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> IF . L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4

    L_PARENTHESIS   shift and go to state 67


state 45

    (32) lectura -> READ . L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 68


state 46

    (28) asignacion -> datStr . ASSIGN exp SEMICOLON

    ASSIGN          shift and go to state 69


state 47

    (64) ciclo -> FOR . L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3

    L_PARENTHESIS   shift and go to state 70


state 48

    (65) ciclo -> WHILE . neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (66) neurCiclo1 -> .

    L_PARENTHESIS   reduce using rule 66 (neurCiclo1 -> .)

    neurCiclo1                     shift and go to state 71

state 49

    (78) funcionLL -> neurFuncLL . L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS

    L_PARENTHESIS   shift and go to state 72


state 50

    (33) impresion -> PRINT . L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 73


state 51

    (11) vars -> tipo vars1 vars2 SEMICOLON .

    INT             reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    FLOAT           reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    VOID            reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    L_BRACE         reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    IF              reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    READ            reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    FOR             reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    WHILE           reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    PRINT           reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    CONST_ID        reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    R_BRACE         reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)
    RETURN          reduce using rule 11 (vars -> tipo vars1 vars2 SEMICOLON .)


state 52

    (15) vars2 -> COMMA vars1 . vars2
    (15) vars2 -> . COMMA vars1 vars2
    (16) vars2 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 83 (empty -> .)

    vars2                          shift and go to state 74
    empty                          shift and go to state 27

state 53

    (12) vars1 -> CONST_ID .
    (13) vars1 -> CONST_ID . L_BRACKET cte R_BRACKET
    (14) vars1 -> CONST_ID . L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET

    COMMA           reduce using rule 12 (vars1 -> CONST_ID .)
    SEMICOLON       reduce using rule 12 (vars1 -> CONST_ID .)
    R_PARENTHESIS   reduce using rule 12 (vars1 -> CONST_ID .)
    L_BRACKET       shift and go to state 28


state 54

    (13) vars1 -> CONST_ID L_BRACKET cte . R_BRACKET
    (14) vars1 -> CONST_ID L_BRACKET cte . R_BRACKET L_BRACKET cte R_BRACKET

    R_BRACKET       shift and go to state 75


state 55

    (55) cte -> CONST_INT .

    R_BRACKET       reduce using rule 55 (cte -> CONST_INT .)
    MULTIP          reduce using rule 55 (cte -> CONST_INT .)
    DIVIDE          reduce using rule 55 (cte -> CONST_INT .)
    PLUS            reduce using rule 55 (cte -> CONST_INT .)
    MINUS           reduce using rule 55 (cte -> CONST_INT .)
    GREATER_THAN    reduce using rule 55 (cte -> CONST_INT .)
    LESS_THAN       reduce using rule 55 (cte -> CONST_INT .)
    EQUALS_TO       reduce using rule 55 (cte -> CONST_INT .)
    DIFF_THAN       reduce using rule 55 (cte -> CONST_INT .)
    AND             reduce using rule 55 (cte -> CONST_INT .)
    OR              reduce using rule 55 (cte -> CONST_INT .)
    R_PARENTHESIS   reduce using rule 55 (cte -> CONST_INT .)
    SEMICOLON       reduce using rule 55 (cte -> CONST_INT .)
    COMMA           reduce using rule 55 (cte -> CONST_INT .)


state 56

    (56) cte -> CONST_FLOAT . empty
    (83) empty -> .

    R_BRACKET       reduce using rule 83 (empty -> .)
    MULTIP          reduce using rule 83 (empty -> .)
    DIVIDE          reduce using rule 83 (empty -> .)
    PLUS            reduce using rule 83 (empty -> .)
    MINUS           reduce using rule 83 (empty -> .)
    GREATER_THAN    reduce using rule 83 (empty -> .)
    LESS_THAN       reduce using rule 83 (empty -> .)
    EQUALS_TO       reduce using rule 83 (empty -> .)
    DIFF_THAN       reduce using rule 83 (empty -> .)
    AND             reduce using rule 83 (empty -> .)
    OR              reduce using rule 83 (empty -> .)
    R_PARENTHESIS   reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)
    COMMA           reduce using rule 83 (empty -> .)

    empty                          shift and go to state 76

state 57

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 . R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE

    R_PARENTHESIS   shift and go to state 77


state 58

    (76) funcion1 -> COMMA . neurFunc2 funcion1
    (75) neurFunc2 -> . tipo vars1
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    neurFunc2                      shift and go to state 78
    tipo                           shift and go to state 30

state 59

    (77) funcion1 -> empty .

    R_PARENTHESIS   reduce using rule 77 (funcion1 -> empty .)


state 60

    (75) neurFunc2 -> tipo vars1 .

    COMMA           reduce using rule 75 (neurFunc2 -> tipo vars1 .)
    R_PARENTHESIS   reduce using rule 75 (neurFunc2 -> tipo vars1 .)


state 61

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 . R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE

    R_PARENTHESIS   shift and go to state 79


state 62

    (30) datStr -> CONST_ID L_BRACKET . exp R_BRACKET
    (31) datStr -> CONST_ID L_BRACKET . exp R_BRACKET L_BRACKET exp R_BRACKET
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 80
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 63

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE . neurPro
    (10) neurPro -> .

    $end            reduce using rule 10 (neurPro -> .)

    neurPro                        shift and go to state 90

state 64

    (6) pro2 -> vars pro2 .

    R_BRACE         reduce using rule 6 (pro2 -> vars pro2 .)


state 65

    (7) pro2 -> estatuto pro2 .

    R_BRACE         reduce using rule 7 (pro2 -> estatuto pro2 .)


state 66

    (26) estatuto -> funcionLL SEMICOLON .

    INT             reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    FLOAT           reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    READ            reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    PRINT           reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    CONST_ID        reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    R_BRACE         reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> funcionLL SEMICOLON .)


state 67

    (57) condicion -> IF L_PARENTHESIS . expresion neurCond1 bloque neurCond2
    (58) condicion -> IF L_PARENTHESIS . expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (34) expresion -> . expOp
    (35) expresion -> . expOp AND expOp
    (36) expresion -> . expOp OR expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expresion                      shift and go to state 91
    expOp                          shift and go to state 92
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 68

    (32) lectura -> READ L_PARENTHESIS . datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET

    CONST_ID        shift and go to state 95

    datStr                         shift and go to state 94

state 69

    (28) asignacion -> datStr ASSIGN . exp SEMICOLON
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    datStr                         shift and go to state 87
    exp                            shift and go to state 96
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 70

    (64) ciclo -> FOR L_PARENTHESIS . asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET

    CONST_ID        shift and go to state 95

    asignacion                     shift and go to state 97
    datStr                         shift and go to state 46

state 71

    (65) ciclo -> WHILE neurCiclo1 . L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3

    L_PARENTHESIS   shift and go to state 98


state 72

    (78) funcionLL -> neurFuncLL L_PARENTHESIS . neurFuncLL2 funcionLL1 R_PARENTHESIS
    (80) neurFuncLL2 -> . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    neurFuncLL                     shift and go to state 49
    neurFuncLL2                    shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89

state 73

    (33) impresion -> PRINT L_PARENTHESIS . datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET

    CONST_ID        shift and go to state 95

    datStr                         shift and go to state 101

state 74

    (15) vars2 -> COMMA vars1 vars2 .

    SEMICOLON       reduce using rule 15 (vars2 -> COMMA vars1 vars2 .)


state 75

    (13) vars1 -> CONST_ID L_BRACKET cte R_BRACKET .
    (14) vars1 -> CONST_ID L_BRACKET cte R_BRACKET . L_BRACKET cte R_BRACKET

    COMMA           reduce using rule 13 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET .)
    SEMICOLON       reduce using rule 13 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET .)
    R_PARENTHESIS   reduce using rule 13 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET .)
    L_BRACKET       shift and go to state 102


state 76

    (56) cte -> CONST_FLOAT empty .

    R_BRACKET       reduce using rule 56 (cte -> CONST_FLOAT empty .)
    MULTIP          reduce using rule 56 (cte -> CONST_FLOAT empty .)
    DIVIDE          reduce using rule 56 (cte -> CONST_FLOAT empty .)
    PLUS            reduce using rule 56 (cte -> CONST_FLOAT empty .)
    MINUS           reduce using rule 56 (cte -> CONST_FLOAT empty .)
    GREATER_THAN    reduce using rule 56 (cte -> CONST_FLOAT empty .)
    LESS_THAN       reduce using rule 56 (cte -> CONST_FLOAT empty .)
    EQUALS_TO       reduce using rule 56 (cte -> CONST_FLOAT empty .)
    DIFF_THAN       reduce using rule 56 (cte -> CONST_FLOAT empty .)
    AND             reduce using rule 56 (cte -> CONST_FLOAT empty .)
    OR              reduce using rule 56 (cte -> CONST_FLOAT empty .)
    R_PARENTHESIS   reduce using rule 56 (cte -> CONST_FLOAT empty .)
    SEMICOLON       reduce using rule 56 (cte -> CONST_FLOAT empty .)
    COMMA           reduce using rule 56 (cte -> CONST_FLOAT empty .)


state 77

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS . L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE

    L_BRACE         shift and go to state 103


state 78

    (76) funcion1 -> COMMA neurFunc2 . funcion1
    (76) funcion1 -> . COMMA neurFunc2 funcion1
    (77) funcion1 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 58
    R_PARENTHESIS   reduce using rule 83 (empty -> .)

    funcion1                       shift and go to state 104
    empty                          shift and go to state 59

state 79

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS . L_BRACE funcionVars bloque1 R_BRACE

    L_BRACE         shift and go to state 105


state 80

    (30) datStr -> CONST_ID L_BRACKET exp . R_BRACKET
    (31) datStr -> CONST_ID L_BRACKET exp . R_BRACKET L_BRACKET exp R_BRACKET

    R_BRACKET       shift and go to state 106


state 81

    (42) exp -> termino .
    (43) exp -> termino . PLUS exp
    (44) exp -> termino . MINUS exp

    R_BRACKET       reduce using rule 42 (exp -> termino .)
    GREATER_THAN    reduce using rule 42 (exp -> termino .)
    LESS_THAN       reduce using rule 42 (exp -> termino .)
    EQUALS_TO       reduce using rule 42 (exp -> termino .)
    DIFF_THAN       reduce using rule 42 (exp -> termino .)
    AND             reduce using rule 42 (exp -> termino .)
    OR              reduce using rule 42 (exp -> termino .)
    R_PARENTHESIS   reduce using rule 42 (exp -> termino .)
    SEMICOLON       reduce using rule 42 (exp -> termino .)
    COMMA           reduce using rule 42 (exp -> termino .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108


state 82

    (50) factor -> PLUS . factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    factor1                        shift and go to state 109
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 83

    (51) factor -> MINUS . factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    factor1                        shift and go to state 110
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 84

    (45) termino -> factor .
    (46) termino -> factor . MULTIP termino
    (47) termino -> factor . DIVIDE termino

    PLUS            reduce using rule 45 (termino -> factor .)
    MINUS           reduce using rule 45 (termino -> factor .)
    R_BRACKET       reduce using rule 45 (termino -> factor .)
    GREATER_THAN    reduce using rule 45 (termino -> factor .)
    LESS_THAN       reduce using rule 45 (termino -> factor .)
    EQUALS_TO       reduce using rule 45 (termino -> factor .)
    DIFF_THAN       reduce using rule 45 (termino -> factor .)
    AND             reduce using rule 45 (termino -> factor .)
    OR              reduce using rule 45 (termino -> factor .)
    R_PARENTHESIS   reduce using rule 45 (termino -> factor .)
    SEMICOLON       reduce using rule 45 (termino -> factor .)
    COMMA           reduce using rule 45 (termino -> factor .)
    MULTIP          shift and go to state 111
    DIVIDE          shift and go to state 112


state 85

    (48) factor -> L_PARENTHESIS . expresion R_PARENTHESIS
    (34) expresion -> . expOp
    (35) expresion -> . expOp AND expOp
    (36) expresion -> . expOp OR expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expresion                      shift and go to state 113
    expOp                          shift and go to state 92
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 86

    (49) factor -> factor1 .

    MULTIP          reduce using rule 49 (factor -> factor1 .)
    DIVIDE          reduce using rule 49 (factor -> factor1 .)
    PLUS            reduce using rule 49 (factor -> factor1 .)
    MINUS           reduce using rule 49 (factor -> factor1 .)
    R_BRACKET       reduce using rule 49 (factor -> factor1 .)
    GREATER_THAN    reduce using rule 49 (factor -> factor1 .)
    LESS_THAN       reduce using rule 49 (factor -> factor1 .)
    EQUALS_TO       reduce using rule 49 (factor -> factor1 .)
    DIFF_THAN       reduce using rule 49 (factor -> factor1 .)
    AND             reduce using rule 49 (factor -> factor1 .)
    OR              reduce using rule 49 (factor -> factor1 .)
    R_PARENTHESIS   reduce using rule 49 (factor -> factor1 .)
    SEMICOLON       reduce using rule 49 (factor -> factor1 .)
    COMMA           reduce using rule 49 (factor -> factor1 .)


state 87

    (52) factor1 -> datStr .

    MULTIP          reduce using rule 52 (factor1 -> datStr .)
    DIVIDE          reduce using rule 52 (factor1 -> datStr .)
    PLUS            reduce using rule 52 (factor1 -> datStr .)
    MINUS           reduce using rule 52 (factor1 -> datStr .)
    R_BRACKET       reduce using rule 52 (factor1 -> datStr .)
    GREATER_THAN    reduce using rule 52 (factor1 -> datStr .)
    LESS_THAN       reduce using rule 52 (factor1 -> datStr .)
    EQUALS_TO       reduce using rule 52 (factor1 -> datStr .)
    DIFF_THAN       reduce using rule 52 (factor1 -> datStr .)
    AND             reduce using rule 52 (factor1 -> datStr .)
    OR              reduce using rule 52 (factor1 -> datStr .)
    R_PARENTHESIS   reduce using rule 52 (factor1 -> datStr .)
    SEMICOLON       reduce using rule 52 (factor1 -> datStr .)
    COMMA           reduce using rule 52 (factor1 -> datStr .)


state 88

    (53) factor1 -> funcionLL .

    MULTIP          reduce using rule 53 (factor1 -> funcionLL .)
    DIVIDE          reduce using rule 53 (factor1 -> funcionLL .)
    PLUS            reduce using rule 53 (factor1 -> funcionLL .)
    MINUS           reduce using rule 53 (factor1 -> funcionLL .)
    R_BRACKET       reduce using rule 53 (factor1 -> funcionLL .)
    GREATER_THAN    reduce using rule 53 (factor1 -> funcionLL .)
    LESS_THAN       reduce using rule 53 (factor1 -> funcionLL .)
    EQUALS_TO       reduce using rule 53 (factor1 -> funcionLL .)
    DIFF_THAN       reduce using rule 53 (factor1 -> funcionLL .)
    AND             reduce using rule 53 (factor1 -> funcionLL .)
    OR              reduce using rule 53 (factor1 -> funcionLL .)
    R_PARENTHESIS   reduce using rule 53 (factor1 -> funcionLL .)
    SEMICOLON       reduce using rule 53 (factor1 -> funcionLL .)
    COMMA           reduce using rule 53 (factor1 -> funcionLL .)


state 89

    (54) factor1 -> cte .

    MULTIP          reduce using rule 54 (factor1 -> cte .)
    DIVIDE          reduce using rule 54 (factor1 -> cte .)
    PLUS            reduce using rule 54 (factor1 -> cte .)
    MINUS           reduce using rule 54 (factor1 -> cte .)
    R_BRACKET       reduce using rule 54 (factor1 -> cte .)
    GREATER_THAN    reduce using rule 54 (factor1 -> cte .)
    LESS_THAN       reduce using rule 54 (factor1 -> cte .)
    EQUALS_TO       reduce using rule 54 (factor1 -> cte .)
    DIFF_THAN       reduce using rule 54 (factor1 -> cte .)
    AND             reduce using rule 54 (factor1 -> cte .)
    OR              reduce using rule 54 (factor1 -> cte .)
    R_PARENTHESIS   reduce using rule 54 (factor1 -> cte .)
    SEMICOLON       reduce using rule 54 (factor1 -> cte .)
    COMMA           reduce using rule 54 (factor1 -> cte .)


state 90

    (1) progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro .

    $end            reduce using rule 1 (progr -> neurProStart PROGRAM CONST_ID SEMICOLON pro1 L_BRACE neurPro1 pro2 R_BRACE neurPro .)


state 91

    (57) condicion -> IF L_PARENTHESIS expresion . neurCond1 bloque neurCond2
    (58) condicion -> IF L_PARENTHESIS expresion . neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (59) neurCond1 -> . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 115

    neurCond1                      shift and go to state 114

state 92

    (34) expresion -> expOp .
    (35) expresion -> expOp . AND expOp
    (36) expresion -> expOp . OR expOp

    R_PARENTHESIS   reduce using rule 34 (expresion -> expOp .)
    SEMICOLON       reduce using rule 34 (expresion -> expOp .)
    AND             shift and go to state 116
    OR              shift and go to state 117


state 93

    (37) expOp -> exp .
    (38) expOp -> exp . GREATER_THAN exp
    (39) expOp -> exp . LESS_THAN exp
    (40) expOp -> exp . EQUALS_TO exp
    (41) expOp -> exp . DIFF_THAN exp

    AND             reduce using rule 37 (expOp -> exp .)
    OR              reduce using rule 37 (expOp -> exp .)
    R_PARENTHESIS   reduce using rule 37 (expOp -> exp .)
    SEMICOLON       reduce using rule 37 (expOp -> exp .)
    GREATER_THAN    shift and go to state 118
    LESS_THAN       shift and go to state 119
    EQUALS_TO       shift and go to state 120
    DIFF_THAN       shift and go to state 121


state 94

    (32) lectura -> READ L_PARENTHESIS datStr . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 122


state 95

    (29) datStr -> CONST_ID .
    (30) datStr -> CONST_ID . L_BRACKET exp R_BRACKET
    (31) datStr -> CONST_ID . L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET

    R_PARENTHESIS   reduce using rule 29 (datStr -> CONST_ID .)
    ASSIGN          reduce using rule 29 (datStr -> CONST_ID .)
    L_BRACKET       shift and go to state 62


state 96

    (28) asignacion -> datStr ASSIGN exp . SEMICOLON

    SEMICOLON       shift and go to state 123


state 97

    (64) ciclo -> FOR L_PARENTHESIS asignacion . neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (66) neurCiclo1 -> .

    L_PARENTHESIS   reduce using rule 66 (neurCiclo1 -> .)
    PLUS            reduce using rule 66 (neurCiclo1 -> .)
    MINUS           reduce using rule 66 (neurCiclo1 -> .)
    CONST_ID        reduce using rule 66 (neurCiclo1 -> .)
    CONST_INT       reduce using rule 66 (neurCiclo1 -> .)
    CONST_FLOAT     reduce using rule 66 (neurCiclo1 -> .)

    neurCiclo1                     shift and go to state 124

state 98

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS . expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (34) expresion -> . expOp
    (35) expresion -> . expOp AND expOp
    (36) expresion -> . expOp OR expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expresion                      shift and go to state 125
    expOp                          shift and go to state 92
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 99

    (78) funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 . funcionLL1 R_PARENTHESIS
    (81) funcionLL1 -> . COMMA exp funcionLL1
    (82) funcionLL1 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 127
    R_PARENTHESIS   reduce using rule 83 (empty -> .)

    funcionLL1                     shift and go to state 126
    empty                          shift and go to state 128

state 100

    (80) neurFuncLL2 -> exp .

    COMMA           reduce using rule 80 (neurFuncLL2 -> exp .)
    R_PARENTHESIS   reduce using rule 80 (neurFuncLL2 -> exp .)


state 101

    (33) impresion -> PRINT L_PARENTHESIS datStr . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 129


state 102

    (14) vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET . cte R_BRACKET
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty

    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    cte                            shift and go to state 130

state 103

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE . funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE
    (71) funcionVars -> . vars
    (72) funcionVars -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    IF              reduce using rule 83 (empty -> .)
    READ            reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    PRINT           reduce using rule 83 (empty -> .)
    CONST_ID        reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    funcionVars                    shift and go to state 131
    vars                           shift and go to state 132
    empty                          shift and go to state 133
    tipo                           shift and go to state 37

state 104

    (76) funcion1 -> COMMA neurFunc2 funcion1 .

    R_PARENTHESIS   reduce using rule 76 (funcion1 -> COMMA neurFunc2 funcion1 .)


state 105

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE . funcionVars bloque1 R_BRACE
    (71) funcionVars -> . vars
    (72) funcionVars -> . empty
    (11) vars -> . tipo vars1 vars2 SEMICOLON
    (83) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    IF              reduce using rule 83 (empty -> .)
    READ            reduce using rule 83 (empty -> .)
    FOR             reduce using rule 83 (empty -> .)
    WHILE           reduce using rule 83 (empty -> .)
    PRINT           reduce using rule 83 (empty -> .)
    CONST_ID        reduce using rule 83 (empty -> .)
    R_BRACE         reduce using rule 83 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    funcionVars                    shift and go to state 134
    vars                           shift and go to state 132
    empty                          shift and go to state 133
    tipo                           shift and go to state 37

state 106

    (30) datStr -> CONST_ID L_BRACKET exp R_BRACKET .
    (31) datStr -> CONST_ID L_BRACKET exp R_BRACKET . L_BRACKET exp R_BRACKET

    ASSIGN          reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    MULTIP          reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    DIVIDE          reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    PLUS            reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    MINUS           reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    R_BRACKET       reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    GREATER_THAN    reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    LESS_THAN       reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    EQUALS_TO       reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    DIFF_THAN       reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    AND             reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    OR              reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    R_PARENTHESIS   reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    SEMICOLON       reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    COMMA           reduce using rule 30 (datStr -> CONST_ID L_BRACKET exp R_BRACKET .)
    L_BRACKET       shift and go to state 135


state 107

    (43) exp -> termino PLUS . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    termino                        shift and go to state 81
    exp                            shift and go to state 136
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 108

    (44) exp -> termino MINUS . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    termino                        shift and go to state 81
    exp                            shift and go to state 137
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 109

    (50) factor -> PLUS factor1 .

    MULTIP          reduce using rule 50 (factor -> PLUS factor1 .)
    DIVIDE          reduce using rule 50 (factor -> PLUS factor1 .)
    PLUS            reduce using rule 50 (factor -> PLUS factor1 .)
    MINUS           reduce using rule 50 (factor -> PLUS factor1 .)
    R_BRACKET       reduce using rule 50 (factor -> PLUS factor1 .)
    GREATER_THAN    reduce using rule 50 (factor -> PLUS factor1 .)
    LESS_THAN       reduce using rule 50 (factor -> PLUS factor1 .)
    EQUALS_TO       reduce using rule 50 (factor -> PLUS factor1 .)
    DIFF_THAN       reduce using rule 50 (factor -> PLUS factor1 .)
    AND             reduce using rule 50 (factor -> PLUS factor1 .)
    OR              reduce using rule 50 (factor -> PLUS factor1 .)
    R_PARENTHESIS   reduce using rule 50 (factor -> PLUS factor1 .)
    SEMICOLON       reduce using rule 50 (factor -> PLUS factor1 .)
    COMMA           reduce using rule 50 (factor -> PLUS factor1 .)


state 110

    (51) factor -> MINUS factor1 .

    MULTIP          reduce using rule 51 (factor -> MINUS factor1 .)
    DIVIDE          reduce using rule 51 (factor -> MINUS factor1 .)
    PLUS            reduce using rule 51 (factor -> MINUS factor1 .)
    MINUS           reduce using rule 51 (factor -> MINUS factor1 .)
    R_BRACKET       reduce using rule 51 (factor -> MINUS factor1 .)
    GREATER_THAN    reduce using rule 51 (factor -> MINUS factor1 .)
    LESS_THAN       reduce using rule 51 (factor -> MINUS factor1 .)
    EQUALS_TO       reduce using rule 51 (factor -> MINUS factor1 .)
    DIFF_THAN       reduce using rule 51 (factor -> MINUS factor1 .)
    AND             reduce using rule 51 (factor -> MINUS factor1 .)
    OR              reduce using rule 51 (factor -> MINUS factor1 .)
    R_PARENTHESIS   reduce using rule 51 (factor -> MINUS factor1 .)
    SEMICOLON       reduce using rule 51 (factor -> MINUS factor1 .)
    COMMA           reduce using rule 51 (factor -> MINUS factor1 .)


state 111

    (46) termino -> factor MULTIP . termino
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    factor                         shift and go to state 84
    termino                        shift and go to state 138
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 112

    (47) termino -> factor DIVIDE . termino
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    factor                         shift and go to state 84
    termino                        shift and go to state 139
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 113

    (48) factor -> L_PARENTHESIS expresion . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 140


state 114

    (57) condicion -> IF L_PARENTHESIS expresion neurCond1 . bloque neurCond2
    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 . bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (19) bloque -> . L_BRACE bloque1 R_BRACE

    L_BRACE         shift and go to state 142

    bloque                         shift and go to state 141

state 115

    (59) neurCond1 -> R_PARENTHESIS .

    L_BRACE         reduce using rule 59 (neurCond1 -> R_PARENTHESIS .)


state 116

    (35) expresion -> expOp AND . expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expOp                          shift and go to state 143
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 117

    (36) expresion -> expOp OR . expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expOp                          shift and go to state 144
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 118

    (38) expOp -> exp GREATER_THAN . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 145
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 119

    (39) expOp -> exp LESS_THAN . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 146
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 120

    (40) expOp -> exp EQUALS_TO . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 147
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 121

    (41) expOp -> exp DIFF_THAN . exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 148
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 122

    (32) lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 149


state 123

    (28) asignacion -> datStr ASSIGN exp SEMICOLON .

    INT             reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    FLOAT           reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    IF              reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    READ            reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    FOR             reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    PRINT           reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    CONST_ID        reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    R_BRACE         reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    L_PARENTHESIS   reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    PLUS            reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    MINUS           reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    CONST_INT       reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    CONST_FLOAT     reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    RETURN          reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)
    R_PARENTHESIS   reduce using rule 28 (asignacion -> datStr ASSIGN exp SEMICOLON .)


state 124

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 . expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (34) expresion -> . expOp
    (35) expresion -> . expOp AND expOp
    (36) expresion -> . expOp OR expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expresion                      shift and go to state 150
    expOp                          shift and go to state 92
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 125

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion . R_PARENTHESIS neurCiclo2 bloque neurCiclo3

    R_PARENTHESIS   shift and go to state 151


state 126

    (78) funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 152


state 127

    (81) funcionLL1 -> COMMA . exp funcionLL1
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 153
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 128

    (82) funcionLL1 -> empty .

    R_PARENTHESIS   reduce using rule 82 (funcionLL1 -> empty .)


state 129

    (33) impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 154


state 130

    (14) vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte . R_BRACKET

    R_BRACKET       shift and go to state 155


state 131

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars . bloque1 RETURN expresion SEMICOLON R_BRACE
    (20) bloque1 -> . estatuto bloque1
    (21) bloque1 -> . empty
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    RETURN          reduce using rule 83 (empty -> .)
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    bloque1                        shift and go to state 156
    estatuto                       shift and go to state 157
    empty                          shift and go to state 158
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 132

    (71) funcionVars -> vars .

    IF              reduce using rule 71 (funcionVars -> vars .)
    READ            reduce using rule 71 (funcionVars -> vars .)
    FOR             reduce using rule 71 (funcionVars -> vars .)
    WHILE           reduce using rule 71 (funcionVars -> vars .)
    PRINT           reduce using rule 71 (funcionVars -> vars .)
    CONST_ID        reduce using rule 71 (funcionVars -> vars .)
    RETURN          reduce using rule 71 (funcionVars -> vars .)
    R_BRACE         reduce using rule 71 (funcionVars -> vars .)


state 133

    (72) funcionVars -> empty .

    IF              reduce using rule 72 (funcionVars -> empty .)
    READ            reduce using rule 72 (funcionVars -> empty .)
    FOR             reduce using rule 72 (funcionVars -> empty .)
    WHILE           reduce using rule 72 (funcionVars -> empty .)
    PRINT           reduce using rule 72 (funcionVars -> empty .)
    CONST_ID        reduce using rule 72 (funcionVars -> empty .)
    RETURN          reduce using rule 72 (funcionVars -> empty .)
    R_BRACE         reduce using rule 72 (funcionVars -> empty .)


state 134

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars . bloque1 R_BRACE
    (20) bloque1 -> . estatuto bloque1
    (21) bloque1 -> . empty
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    R_BRACE         reduce using rule 83 (empty -> .)
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    bloque1                        shift and go to state 159
    estatuto                       shift and go to state 157
    empty                          shift and go to state 158
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 135

    (31) datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET . exp R_BRACKET
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    exp                            shift and go to state 160
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 136

    (43) exp -> termino PLUS exp .

    R_BRACKET       reduce using rule 43 (exp -> termino PLUS exp .)
    GREATER_THAN    reduce using rule 43 (exp -> termino PLUS exp .)
    LESS_THAN       reduce using rule 43 (exp -> termino PLUS exp .)
    EQUALS_TO       reduce using rule 43 (exp -> termino PLUS exp .)
    DIFF_THAN       reduce using rule 43 (exp -> termino PLUS exp .)
    AND             reduce using rule 43 (exp -> termino PLUS exp .)
    OR              reduce using rule 43 (exp -> termino PLUS exp .)
    R_PARENTHESIS   reduce using rule 43 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 43 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 43 (exp -> termino PLUS exp .)


state 137

    (44) exp -> termino MINUS exp .

    R_BRACKET       reduce using rule 44 (exp -> termino MINUS exp .)
    GREATER_THAN    reduce using rule 44 (exp -> termino MINUS exp .)
    LESS_THAN       reduce using rule 44 (exp -> termino MINUS exp .)
    EQUALS_TO       reduce using rule 44 (exp -> termino MINUS exp .)
    DIFF_THAN       reduce using rule 44 (exp -> termino MINUS exp .)
    AND             reduce using rule 44 (exp -> termino MINUS exp .)
    OR              reduce using rule 44 (exp -> termino MINUS exp .)
    R_PARENTHESIS   reduce using rule 44 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 44 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 44 (exp -> termino MINUS exp .)


state 138

    (46) termino -> factor MULTIP termino .

    PLUS            reduce using rule 46 (termino -> factor MULTIP termino .)
    MINUS           reduce using rule 46 (termino -> factor MULTIP termino .)
    R_BRACKET       reduce using rule 46 (termino -> factor MULTIP termino .)
    GREATER_THAN    reduce using rule 46 (termino -> factor MULTIP termino .)
    LESS_THAN       reduce using rule 46 (termino -> factor MULTIP termino .)
    EQUALS_TO       reduce using rule 46 (termino -> factor MULTIP termino .)
    DIFF_THAN       reduce using rule 46 (termino -> factor MULTIP termino .)
    AND             reduce using rule 46 (termino -> factor MULTIP termino .)
    OR              reduce using rule 46 (termino -> factor MULTIP termino .)
    R_PARENTHESIS   reduce using rule 46 (termino -> factor MULTIP termino .)
    SEMICOLON       reduce using rule 46 (termino -> factor MULTIP termino .)
    COMMA           reduce using rule 46 (termino -> factor MULTIP termino .)


state 139

    (47) termino -> factor DIVIDE termino .

    PLUS            reduce using rule 47 (termino -> factor DIVIDE termino .)
    MINUS           reduce using rule 47 (termino -> factor DIVIDE termino .)
    R_BRACKET       reduce using rule 47 (termino -> factor DIVIDE termino .)
    GREATER_THAN    reduce using rule 47 (termino -> factor DIVIDE termino .)
    LESS_THAN       reduce using rule 47 (termino -> factor DIVIDE termino .)
    EQUALS_TO       reduce using rule 47 (termino -> factor DIVIDE termino .)
    DIFF_THAN       reduce using rule 47 (termino -> factor DIVIDE termino .)
    AND             reduce using rule 47 (termino -> factor DIVIDE termino .)
    OR              reduce using rule 47 (termino -> factor DIVIDE termino .)
    R_PARENTHESIS   reduce using rule 47 (termino -> factor DIVIDE termino .)
    SEMICOLON       reduce using rule 47 (termino -> factor DIVIDE termino .)
    COMMA           reduce using rule 47 (termino -> factor DIVIDE termino .)


state 140

    (48) factor -> L_PARENTHESIS expresion R_PARENTHESIS .

    MULTIP          reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    DIVIDE          reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    PLUS            reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    MINUS           reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    R_BRACKET       reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    LESS_THAN       reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    EQUALS_TO       reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    DIFF_THAN       reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    AND             reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    OR              reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    SEMICOLON       reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)
    COMMA           reduce using rule 48 (factor -> L_PARENTHESIS expresion R_PARENTHESIS .)


state 141

    (57) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque . neurCond2
    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque . ELSE neurCond2x1 neurCond3 bloque neurCond4
    (60) neurCond2 -> .

    ELSE            shift and go to state 162
    INT             reduce using rule 60 (neurCond2 -> .)
    FLOAT           reduce using rule 60 (neurCond2 -> .)
    IF              reduce using rule 60 (neurCond2 -> .)
    READ            reduce using rule 60 (neurCond2 -> .)
    FOR             reduce using rule 60 (neurCond2 -> .)
    WHILE           reduce using rule 60 (neurCond2 -> .)
    PRINT           reduce using rule 60 (neurCond2 -> .)
    CONST_ID        reduce using rule 60 (neurCond2 -> .)
    R_BRACE         reduce using rule 60 (neurCond2 -> .)
    RETURN          reduce using rule 60 (neurCond2 -> .)

    neurCond2                      shift and go to state 161

state 142

    (19) bloque -> L_BRACE . bloque1 R_BRACE
    (20) bloque1 -> . estatuto bloque1
    (21) bloque1 -> . empty
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    R_BRACE         reduce using rule 83 (empty -> .)
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    bloque1                        shift and go to state 163
    estatuto                       shift and go to state 157
    empty                          shift and go to state 158
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 143

    (35) expresion -> expOp AND expOp .

    R_PARENTHESIS   reduce using rule 35 (expresion -> expOp AND expOp .)
    SEMICOLON       reduce using rule 35 (expresion -> expOp AND expOp .)


state 144

    (36) expresion -> expOp OR expOp .

    R_PARENTHESIS   reduce using rule 36 (expresion -> expOp OR expOp .)
    SEMICOLON       reduce using rule 36 (expresion -> expOp OR expOp .)


state 145

    (38) expOp -> exp GREATER_THAN exp .

    AND             reduce using rule 38 (expOp -> exp GREATER_THAN exp .)
    OR              reduce using rule 38 (expOp -> exp GREATER_THAN exp .)
    R_PARENTHESIS   reduce using rule 38 (expOp -> exp GREATER_THAN exp .)
    SEMICOLON       reduce using rule 38 (expOp -> exp GREATER_THAN exp .)


state 146

    (39) expOp -> exp LESS_THAN exp .

    AND             reduce using rule 39 (expOp -> exp LESS_THAN exp .)
    OR              reduce using rule 39 (expOp -> exp LESS_THAN exp .)
    R_PARENTHESIS   reduce using rule 39 (expOp -> exp LESS_THAN exp .)
    SEMICOLON       reduce using rule 39 (expOp -> exp LESS_THAN exp .)


state 147

    (40) expOp -> exp EQUALS_TO exp .

    AND             reduce using rule 40 (expOp -> exp EQUALS_TO exp .)
    OR              reduce using rule 40 (expOp -> exp EQUALS_TO exp .)
    R_PARENTHESIS   reduce using rule 40 (expOp -> exp EQUALS_TO exp .)
    SEMICOLON       reduce using rule 40 (expOp -> exp EQUALS_TO exp .)


state 148

    (41) expOp -> exp DIFF_THAN exp .

    AND             reduce using rule 41 (expOp -> exp DIFF_THAN exp .)
    OR              reduce using rule 41 (expOp -> exp DIFF_THAN exp .)
    R_PARENTHESIS   reduce using rule 41 (expOp -> exp DIFF_THAN exp .)
    SEMICOLON       reduce using rule 41 (expOp -> exp DIFF_THAN exp .)


state 149

    (32) lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .

    INT             reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    CONST_ID        reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    R_BRACE         reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 32 (lectura -> READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)


state 150

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion . neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (67) neurCiclo2 -> .

    SEMICOLON       reduce using rule 67 (neurCiclo2 -> .)

    neurCiclo2                     shift and go to state 164

state 151

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS . neurCiclo2 bloque neurCiclo3
    (67) neurCiclo2 -> .

    L_BRACE         reduce using rule 67 (neurCiclo2 -> .)

    neurCiclo2                     shift and go to state 165

state 152

    (78) funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .

    SEMICOLON       reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    MULTIP          reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    DIVIDE          reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    PLUS            reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    MINUS           reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    R_BRACKET       reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    LESS_THAN       reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    EQUALS_TO       reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    DIFF_THAN       reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    AND             reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    OR              reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)
    COMMA           reduce using rule 78 (funcionLL -> neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS .)


state 153

    (81) funcionLL1 -> COMMA exp . funcionLL1
    (81) funcionLL1 -> . COMMA exp funcionLL1
    (82) funcionLL1 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 127
    R_PARENTHESIS   reduce using rule 83 (empty -> .)

    funcionLL1                     shift and go to state 166
    empty                          shift and go to state 128

state 154

    (33) impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .

    INT             reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    CONST_ID        reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    R_BRACE         reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 33 (impresion -> PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON .)


state 155

    (14) vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET .

    COMMA           reduce using rule 14 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET .)
    SEMICOLON       reduce using rule 14 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET .)
    R_PARENTHESIS   reduce using rule 14 (vars1 -> CONST_ID L_BRACKET cte R_BRACKET L_BRACKET cte R_BRACKET .)


state 156

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 . RETURN expresion SEMICOLON R_BRACE

    RETURN          shift and go to state 167


state 157

    (20) bloque1 -> estatuto . bloque1
    (20) bloque1 -> . estatuto bloque1
    (21) bloque1 -> . empty
    (22) estatuto -> . condicion
    (23) estatuto -> . lectura
    (24) estatuto -> . ciclo
    (25) estatuto -> . asignacion
    (26) estatuto -> . funcionLL SEMICOLON
    (27) estatuto -> . impresion
    (83) empty -> .
    (57) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque neurCond2
    (58) condicion -> . IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4
    (32) lectura -> . READ L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (64) ciclo -> . FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3
    (65) ciclo -> . WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (33) impresion -> . PRINT L_PARENTHESIS datStr R_PARENTHESIS SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (79) neurFuncLL -> . CONST_ID

    RETURN          reduce using rule 83 (empty -> .)
    R_BRACE         reduce using rule 83 (empty -> .)
    IF              shift and go to state 44
    READ            shift and go to state 45
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    PRINT           shift and go to state 50
    CONST_ID        shift and go to state 32

    estatuto                       shift and go to state 157
    bloque1                        shift and go to state 168
    empty                          shift and go to state 158
    condicion                      shift and go to state 38
    lectura                        shift and go to state 39
    ciclo                          shift and go to state 40
    asignacion                     shift and go to state 41
    funcionLL                      shift and go to state 42
    impresion                      shift and go to state 43
    datStr                         shift and go to state 46
    neurFuncLL                     shift and go to state 49

state 158

    (21) bloque1 -> empty .

    RETURN          reduce using rule 21 (bloque1 -> empty .)
    R_BRACE         reduce using rule 21 (bloque1 -> empty .)


state 159

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 . R_BRACE

    R_BRACE         shift and go to state 169


state 160

    (31) datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp . R_BRACKET

    R_BRACKET       shift and go to state 170


state 161

    (57) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .

    INT             reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    FLOAT           reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    IF              reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    READ            reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    FOR             reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    WHILE           reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    PRINT           reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    CONST_ID        reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    R_BRACE         reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)
    RETURN          reduce using rule 57 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque neurCond2 .)


state 162

    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE . neurCond2x1 neurCond3 bloque neurCond4
    (61) neurCond2x1 -> .

    L_BRACE         reduce using rule 61 (neurCond2x1 -> .)

    neurCond2x1                    shift and go to state 171

state 163

    (19) bloque -> L_BRACE bloque1 . R_BRACE

    R_BRACE         shift and go to state 172


state 164

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 . SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3

    SEMICOLON       shift and go to state 173


state 165

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 . bloque neurCiclo3
    (19) bloque -> . L_BRACE bloque1 R_BRACE

    L_BRACE         shift and go to state 142

    bloque                         shift and go to state 174

state 166

    (81) funcionLL1 -> COMMA exp funcionLL1 .

    R_PARENTHESIS   reduce using rule 81 (funcionLL1 -> COMMA exp funcionLL1 .)


state 167

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN . expresion SEMICOLON R_BRACE
    (34) expresion -> . expOp
    (35) expresion -> . expOp AND expOp
    (36) expresion -> . expOp OR expOp
    (37) expOp -> . exp
    (38) expOp -> . exp GREATER_THAN exp
    (39) expOp -> . exp LESS_THAN exp
    (40) expOp -> . exp EQUALS_TO exp
    (41) expOp -> . exp DIFF_THAN exp
    (42) exp -> . termino
    (43) exp -> . termino PLUS exp
    (44) exp -> . termino MINUS exp
    (45) termino -> . factor
    (46) termino -> . factor MULTIP termino
    (47) termino -> . factor DIVIDE termino
    (48) factor -> . L_PARENTHESIS expresion R_PARENTHESIS
    (49) factor -> . factor1
    (50) factor -> . PLUS factor1
    (51) factor -> . MINUS factor1
    (52) factor1 -> . datStr
    (53) factor1 -> . funcionLL
    (54) factor1 -> . cte
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET
    (78) funcionLL -> . neurFuncLL L_PARENTHESIS neurFuncLL2 funcionLL1 R_PARENTHESIS
    (55) cte -> . CONST_INT
    (56) cte -> . CONST_FLOAT empty
    (79) neurFuncLL -> . CONST_ID

    L_PARENTHESIS   shift and go to state 85
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CONST_ID        shift and go to state 32
    CONST_INT       shift and go to state 55
    CONST_FLOAT     shift and go to state 56

    expresion                      shift and go to state 175
    expOp                          shift and go to state 92
    exp                            shift and go to state 93
    termino                        shift and go to state 81
    factor                         shift and go to state 84
    factor1                        shift and go to state 86
    datStr                         shift and go to state 87
    funcionLL                      shift and go to state 88
    cte                            shift and go to state 89
    neurFuncLL                     shift and go to state 49

state 168

    (20) bloque1 -> estatuto bloque1 .

    RETURN          reduce using rule 20 (bloque1 -> estatuto bloque1 .)
    R_BRACE         reduce using rule 20 (bloque1 -> estatuto bloque1 .)


state 169

    (70) funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE .

    INT             reduce using rule 70 (funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE .)
    FLOAT           reduce using rule 70 (funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE .)
    VOID            reduce using rule 70 (funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE .)
    L_BRACE         reduce using rule 70 (funcion -> neurFuncVoid L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 R_BRACE .)


state 170

    (31) datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .

    ASSIGN          reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    MULTIP          reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    DIVIDE          reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    PLUS            reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    MINUS           reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    R_BRACKET       reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    GREATER_THAN    reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    LESS_THAN       reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    EQUALS_TO       reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    DIFF_THAN       reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    AND             reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    OR              reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    R_PARENTHESIS   reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    SEMICOLON       reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)
    COMMA           reduce using rule 31 (datStr -> CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET .)


state 171

    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 . neurCond3 bloque neurCond4
    (62) neurCond3 -> .

    L_BRACE         reduce using rule 62 (neurCond3 -> .)

    neurCond3                      shift and go to state 176

state 172

    (19) bloque -> L_BRACE bloque1 R_BRACE .

    ELSE            reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    INT             reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    FLOAT           reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    IF              reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    READ            reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    FOR             reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    WHILE           reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    PRINT           reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    CONST_ID        reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    R_BRACE         reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)
    RETURN          reduce using rule 19 (bloque -> L_BRACE bloque1 R_BRACE .)


state 173

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON . asignacion R_PARENTHESIS bloque neurCiclo3
    (28) asignacion -> . datStr ASSIGN exp SEMICOLON
    (29) datStr -> . CONST_ID
    (30) datStr -> . CONST_ID L_BRACKET exp R_BRACKET
    (31) datStr -> . CONST_ID L_BRACKET exp R_BRACKET L_BRACKET exp R_BRACKET

    CONST_ID        shift and go to state 95

    asignacion                     shift and go to state 177
    datStr                         shift and go to state 46

state 174

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque . neurCiclo3
    (68) neurCiclo3 -> .

    INT             reduce using rule 68 (neurCiclo3 -> .)
    FLOAT           reduce using rule 68 (neurCiclo3 -> .)
    IF              reduce using rule 68 (neurCiclo3 -> .)
    READ            reduce using rule 68 (neurCiclo3 -> .)
    FOR             reduce using rule 68 (neurCiclo3 -> .)
    WHILE           reduce using rule 68 (neurCiclo3 -> .)
    PRINT           reduce using rule 68 (neurCiclo3 -> .)
    CONST_ID        reduce using rule 68 (neurCiclo3 -> .)
    R_BRACE         reduce using rule 68 (neurCiclo3 -> .)
    RETURN          reduce using rule 68 (neurCiclo3 -> .)

    neurCiclo3                     shift and go to state 178

state 175

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion . SEMICOLON R_BRACE

    SEMICOLON       shift and go to state 179


state 176

    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 . bloque neurCond4
    (19) bloque -> . L_BRACE bloque1 R_BRACE

    L_BRACE         shift and go to state 142

    bloque                         shift and go to state 180

state 177

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion . R_PARENTHESIS bloque neurCiclo3

    R_PARENTHESIS   shift and go to state 181


state 178

    (65) ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .

    INT             reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    FLOAT           reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    IF              reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    READ            reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    FOR             reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    WHILE           reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    PRINT           reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    CONST_ID        reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    R_BRACE         reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)
    RETURN          reduce using rule 65 (ciclo -> WHILE neurCiclo1 L_PARENTHESIS expresion R_PARENTHESIS neurCiclo2 bloque neurCiclo3 .)


state 179

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON . R_BRACE

    R_BRACE         shift and go to state 182


state 180

    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque . neurCond4
    (63) neurCond4 -> .

    INT             reduce using rule 63 (neurCond4 -> .)
    FLOAT           reduce using rule 63 (neurCond4 -> .)
    IF              reduce using rule 63 (neurCond4 -> .)
    READ            reduce using rule 63 (neurCond4 -> .)
    FOR             reduce using rule 63 (neurCond4 -> .)
    WHILE           reduce using rule 63 (neurCond4 -> .)
    PRINT           reduce using rule 63 (neurCond4 -> .)
    CONST_ID        reduce using rule 63 (neurCond4 -> .)
    R_BRACE         reduce using rule 63 (neurCond4 -> .)
    RETURN          reduce using rule 63 (neurCond4 -> .)

    neurCond4                      shift and go to state 183

state 181

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS . bloque neurCiclo3
    (19) bloque -> . L_BRACE bloque1 R_BRACE

    L_BRACE         shift and go to state 142

    bloque                         shift and go to state 184

state 182

    (69) funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE .

    INT             reduce using rule 69 (funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE .)
    FLOAT           reduce using rule 69 (funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE .)
    VOID            reduce using rule 69 (funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE .)
    L_BRACE         reduce using rule 69 (funcion -> neurFunc L_PARENTHESIS neurFunc2 funcion1 R_PARENTHESIS L_BRACE funcionVars bloque1 RETURN expresion SEMICOLON R_BRACE .)


state 183

    (58) condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .

    INT             reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    FLOAT           reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    IF              reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    READ            reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    FOR             reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    WHILE           reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    PRINT           reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    CONST_ID        reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    R_BRACE         reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)
    RETURN          reduce using rule 58 (condicion -> IF L_PARENTHESIS expresion neurCond1 bloque ELSE neurCond2x1 neurCond3 bloque neurCond4 .)


state 184

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque . neurCiclo3
    (68) neurCiclo3 -> .

    INT             reduce using rule 68 (neurCiclo3 -> .)
    FLOAT           reduce using rule 68 (neurCiclo3 -> .)
    IF              reduce using rule 68 (neurCiclo3 -> .)
    READ            reduce using rule 68 (neurCiclo3 -> .)
    FOR             reduce using rule 68 (neurCiclo3 -> .)
    WHILE           reduce using rule 68 (neurCiclo3 -> .)
    PRINT           reduce using rule 68 (neurCiclo3 -> .)
    CONST_ID        reduce using rule 68 (neurCiclo3 -> .)
    R_BRACE         reduce using rule 68 (neurCiclo3 -> .)
    RETURN          reduce using rule 68 (neurCiclo3 -> .)

    neurCiclo3                     shift and go to state 185

state 185

    (64) ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .

    INT             reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    FLOAT           reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    IF              reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    READ            reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    FOR             reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    WHILE           reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    PRINT           reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    CONST_ID        reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    R_BRACE         reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)
    RETURN          reduce using rule 64 (ciclo -> FOR L_PARENTHESIS asignacion neurCiclo1 expresion neurCiclo2 SEMICOLON asignacion R_PARENTHESIS bloque neurCiclo3 .)

